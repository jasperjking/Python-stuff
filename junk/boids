import pygame
import numpy
import math as math

WIDTH, HEIGHT = 600, 400
WIN = pygame.display.set_mode((WIDTH, HEIGHT))

FPS = 60

WHITE = (255, 255, 255)
RED = (200, 50, 50)
BLACK = (0, 0, 0)
BLUE = (50, 80, 150)

WIN.fill(BLUE)

class boid:
    def __init__(self):
        
        self.pos = pygame.Vector2(numpy.random.randint(25, WIDTH - 25), numpy.random.randint(25, HEIGHT - 25))

        self.initialvel = randomvector(2)
        self.mag = numpy.random.randint(5, 10)

        self.vel = pygame.Vector2(self.initialvel)
        pygame.math.Vector2.scale_to_length(self.vel, self.mag)


        self.acc = pygame.Vector2()

        self.maxforce = 0.6
        self.maxspeed = 8
        
    def show(self):
        pygame.draw.circle(WIN, WHITE, (self.pos.x, self.pos.y), 2)

        #pygame.draw.polygon(WIN, WHITE, get_points(self.pos, 6, self.pos + self.vel))
        



    def update(self):
        self.pos += self.vel
        self.vel += self.acc
        if pygame.math.Vector2.magnitude(self.vel) > self.maxspeed:
            pygame.math.Vector2.scale_to_length(self.vel, self.maxspeed)

    def edges(self):
        if self.pos.x < -15:
            self.pos.x = WIDTH + 15
        if self.pos.x > WIDTH + 15:
            self.pos.x = -15
        if self.pos.y < -15: 
            self.pos.y = HEIGHT + 15
        if self.pos.y > HEIGHT + 15:
            self.pos.y = -15

    def align(self, boids):
        perception = 50
        steering = pygame.Vector2()
        total = 0
        for other in boids:
            d = math.dist((self.pos), (other.pos))
            if d <= perception and other != self:
                steering += other.vel
                total += 1
        if total > 0:
            steering /= total
            pygame.math.Vector2.scale_to_length(steering, self.maxspeed)
            steering -= self.vel
            if pygame.math.Vector2.magnitude(steering) > self.maxforce:
                pygame.math.Vector2.scale_to_length(steering, self.maxforce)


        return steering

    def cohesion(self, boids):
        perceptionradius = 50
        steering = pygame.Vector2()
        total = 0
        for other in boids:
            d = math.dist((self.pos), (other.pos))
            if d <= perceptionradius and other != self:
                steering += other.pos
                total += 1
        if total > 0:
            steering /= total
            steering -= self.pos
            pygame.math.Vector2.scale_to_length(steering, self.maxspeed)
            steering -= self.vel
            if pygame.math.Vector2.magnitude(steering) > self.maxforce:
                pygame.math.Vector2.scale_to_length(steering, self.maxforce)
        
        return steering

    def separation(self, boids):
        perceptionradius = 50
        steering = pygame.Vector2()
        total = 0
        for other in boids:
            d = math.dist((self.pos), (other.pos))
            if d <= perceptionradius and other != self:
                diff = self.pos - other.pos
                diff /= d**2
                steering += diff
                total += 1

        if total > 0:
            steering /= total
            pygame.math.Vector2.scale_to_length(steering, self.maxspeed)
            steering -= self.vel
            if pygame.math.Vector2.magnitude(steering) > self.maxforce:
                pygame.math.Vector2.scale_to_length(steering, self.maxforce)
        
        return steering

    def flock(self, boids):
        alignment = pygame.Vector2()
        alignment += self.align(boids)
        alignment += self.cohesion(boids)
        alignment += self.separation(boids)
        self.acc = alignment
        
def randomvector(n):
    components = [numpy.random.normal() for i in range(n)]
    r = math.sqrt(sum(x * x for x in components))
    v = [x/r for x in components]
    return v

def get_points(center, radius, mouse_position):
    # calculate the normalized vector pointing from center to mouse_position
    length = math.hypot(mouse_position[0] - center[0], mouse_position[1] - center[1])
    # (note we only need the x component since y falls 
    # out of the dot product, so we won't bother to calculate y)
    angle_vector_x = (mouse_position[0] - center[0]) / length

    # calculate the angle between that vector and the x axis vector (aka <1,0> or i)
    angle = math.acos(angle_vector_x)

    # list of un-rotated point locations
    triangle = [0, (3 * math.pi / 4), (5 * math.pi / 4)]

    result = list()
    for t in triangle:
        # apply the circle formula
        x = center[0] + radius * math.cos(t + angle)
        y = center[1] + radius * math.sin(t + angle)
        result.append((x, y))

    return result

def main():
    flock = []
    for i in range(150):
        flock.append(boid())

    clock = pygame.time.Clock()
    run = True
    while run:
        #clock.tick(FPS)

        WIN.fill(BLUE)
        for b in flock:
            b.edges()
            b.flock(flock)
            b.show()
            b.update()
            

        pygame.display.update()

    

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                pygame.quit()


if __name__ == "__main__":
    main()