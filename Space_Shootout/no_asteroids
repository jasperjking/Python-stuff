from turtle import width
import pygame
import os
pygame.font.init()
pygame.mixer.init()

WIDTH, HEIGHT = 900, 550
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Space Shootout!")


WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
YELLOW = (255, 255, 0)

BORDER1 = pygame.Rect(WIDTH//2 - 4, 0, 8, HEIGHT - 50)
BORDER2 = pygame.Rect(WIDTH//2 - 3, 1, 6, HEIGHT - 40)


MENU_BAR1 = pygame.Rect(0, 500, WIDTH, 50)
MENU_BAR2 = pygame.Rect(1, 501, WIDTH - 2, 48)

MENU_BUTTON1 = pygame.Rect(WIDTH//2 - 20, 505, 40, 40)
MENU_BUTTON2 = pygame.Rect(WIDTH//2 - 19, 506, 38, 38)
MENU_BUTTON_PAUSE1 = pygame.Rect(WIDTH//2 - 13, 510, 10, 30)
MENU_BUTTON_PAUSE2 = pygame.Rect(WIDTH//2  + 3, 510, 10, 30)


MENU_BOX1 = pygame.Rect(WIDTH//2 - 201, HEIGHT//2 - 201, 402, 402)
MENU_BOX2 = pygame.Rect(WIDTH//2 - 200, HEIGHT//2 - 200, 400, 400)

STAT_BUTTON1 = pygame.Rect(WIDTH//2, HEIGHT//2, 20, 20)
STAT_BUTTON2 = pygame.Rect(WIDTH//2 +  3, HEIGHT//2 + 3, 14, 14)

BULLET_HIT_SOUND = pygame.mixer.Sound(os.path.join('Space_Shootout', 'Assets', 'Grenade+1.mp3'))
BULLET_FIRE_SOUND = pygame.mixer.Sound(os.path.join('Space_Shootout', 'Assets', 'Gun+Silencer.mp3'))

HEALTH_FONT = pygame.font.SysFont('comicsans', 20)
WINNER_FONT = pygame.font.SysFont('comicsans', 110)
MENU_FONT = pygame.font.SysFont('comicsans', 40)
STATS_FONT = pygame.font.SysFont('comicsans', 15)

FPS = 60
VEL = 5
BULLET_VEL = 7

MAX_BULLETS = 3
SPACESHIP_WIDTH = 55
SPACESHIP_HEIGHT = 40

BULLET_HEIGHT = 5
BULLET_WIDTH = 10


YELLOW_HIT = pygame.USEREVENT + 1
RED_HIT = pygame.USEREVENT + 2
MENU_BUTTON_PRESSED = pygame.USEREVENT + 3


YELLOW_SPACESHIP_IMAGE = pygame.image.load(os.path.join('Space_Shootout', 'Assets', 'spaceship_yellow.png'))
YELLOW_SPACESHIP = pygame.transform.rotate(pygame.transform.scale(YELLOW_SPACESHIP_IMAGE, (SPACESHIP_WIDTH, SPACESHIP_HEIGHT)), 90)

RED_SPACESHIP_IMAGE = pygame.image.load(os.path.join('Space_Shootout', 'Assets', 'spaceship_red.png'))
RED_SPACESHIP = pygame.transform.rotate(pygame.transform.scale(RED_SPACESHIP_IMAGE, (SPACESHIP_WIDTH, SPACESHIP_HEIGHT)), 270)

ASTEROID_IMAGE = pygame.image.load(os.path.join('Space_Shootout', 'Assets', 'asteroid.png'))
ASTEROID = pygame.transform.scale(ASTEROID_IMAGE, (SPACESHIP_WIDTH, SPACESHIP_HEIGHT))

SPACE = pygame.transform.scale(pygame.image.load(os.path.join('Space_Shootout', 'Assets', 'space.png')), (WIDTH, HEIGHT))

def draw_window(red, yellow, red_bullets, yellow_bullets, red_health, yellow_health, menu_open, red_bullets_count, yellow_bullets_count, red_bullets_hit, yellow_bullets_hit, stat_on):

    WIN.blit(SPACE, (0,0))

    pygame.draw.rect(WIN, WHITE, MENU_BAR1) # bottom white menu bar
    pygame.draw.rect(WIN, BLACK, MENU_BAR2) # bottom black menu bar
    pygame.draw.rect(WIN, WHITE, BORDER1) # middle white dividing line
    pygame.draw.rect(WIN, BLACK, BORDER2) # middle black dividing line

    # menu button
    pygame.draw.rect(WIN, WHITE, MENU_BUTTON1)
    pygame.draw.rect(WIN, BLACK, MENU_BUTTON2)



    WIN.blit(YELLOW_SPACESHIP, (yellow.x, yellow.y))
    WIN.blit(RED_SPACESHIP, (red.x, red.y))
    for bullet in red_bullets:
        pygame.draw.rect(WIN, RED, bullet)
    for bullet in yellow_bullets:
        pygame.draw.rect(WIN, YELLOW, bullet)
    red_health_text = HEALTH_FONT.render("Health: " + str(red_health), 1, WHITE)
    yellow_health_text = HEALTH_FONT.render("Health: " + str(yellow_health), 1, WHITE)
    WIN.blit(red_health_text, (WIDTH - red_health_text.get_width() - 11, 510))
    WIN.blit(yellow_health_text, (10, 510))

    if red_bullets_count != 0 and stat_on:
        red_hit_percentage = red_bullets_hit / red_bullets_count * 100
        red_stat = STATS_FONT.render("Hit: " + str(round(red_hit_percentage, 2)) + "%  Shots: " + str(red_bullets_count), 1, WHITE)
        #red_stat = STATS_FONT.render("Shots: " + str(red_bullets_count) + "  Hit: " + str(round(red_hit_percentage, 2)) + "%", 1, WHITE)

        #which height is better? ask someone elses opinion please
        WIN.blit(red_stat, (WIDTH - red_health_text.get_width() - red_stat.get_width() - 20, 510 + yellow_health_text.get_height()//4))

    if yellow_bullets_count != 0 and stat_on:
        yellow_hit_percentage = yellow_bullets_hit / yellow_bullets_count * 100
        yellow_stat = STATS_FONT.render("Hit: " + str(round(yellow_hit_percentage, 2)) + "%  Shots: " + str(yellow_bullets_count), 1, WHITE)
        WIN.blit(yellow_stat, (20 + yellow_health_text.get_width(), 510 + yellow_health_text.get_height()//2 - yellow_stat.get_height()//2))



    if menu_open:
        # menu play
        pygame.draw.polygon(WIN, WHITE, [(WIDTH//2  - 13, 510), (WIDTH//2 - 13, 540), (WIDTH//2 + 13, 525)])
        pygame.draw.rect(WIN, WHITE, MENU_BOX1)
        pygame.draw.rect(WIN, BLACK, MENU_BOX2)
        menu_text = MENU_FONT.render("MENU", 1, WHITE)
        WIN.blit(menu_text, (WIDTH//2 - menu_text.get_width()//2, HEIGHT//2 - 200))
        # stat option
        pygame.draw.rect(WIN, WHITE, STAT_BUTTON1)
        if stat_on:
            pygame.draw.rect(WIN, BLACK, STAT_BUTTON2)

        





    else:
        # menu pause
        pygame.draw.rect(WIN, WHITE, MENU_BUTTON_PAUSE1)
        pygame.draw.rect(WIN, WHITE, MENU_BUTTON_PAUSE2)


    pygame.display.update()

def yellow_movement(keys_pressed, yellow):
        if keys_pressed[pygame.K_a] and yellow.x - VEL > 0: # LEFT
            yellow.x -= VEL
        if keys_pressed[pygame.K_d] and yellow.x + VEL + yellow.width < BORDER1.x: # RIGHT
            yellow.x += VEL
        if keys_pressed[pygame.K_w] and yellow.y - VEL > 0: # UP
            yellow.y -= VEL
        if keys_pressed[pygame.K_s] and yellow.y + VEL + yellow.height < HEIGHT - 65: # DOWN
            yellow.y += VEL

def red_movement(keys_pressed, red):
        if keys_pressed[pygame.K_l] and red.x - VEL > BORDER1.x + 20: # LEFT
            red.x -= VEL
        if keys_pressed[pygame.K_QUOTE] and red.x + VEL + red.width < WIDTH: # RIGHT
            red.x += VEL
        if keys_pressed[pygame.K_p] and red.y - VEL > 0: # UP
            red.y -= VEL
        if keys_pressed[pygame.K_SEMICOLON] and red.y + VEL + red.height < HEIGHT - 65: # DOWN
            red.y += VEL

def handle_bullets(yellow_bullets, red_bullets, yellow, red):
    for bullet in yellow_bullets:
        bullet.x += BULLET_VEL
        if red.colliderect(bullet):
            pygame.event.post(pygame.event.Event(RED_HIT))
            yellow_bullets.remove(bullet)
        elif bullet.x > WIDTH:
            yellow_bullets.remove(bullet)

    for rbullet in red_bullets:
        for ybullet in yellow_bullets:
            if ybullet.colliderect(rbullet):
                red_bullets.remove(rbullet)
                yellow_bullets.remove(ybullet)

    for bullet in red_bullets:
        bullet.x -= BULLET_VEL
        if yellow.colliderect(bullet):
            pygame.event.post(pygame.event.Event(YELLOW_HIT))
            red_bullets.remove(bullet)
        elif bullet.x < 0:
            red_bullets.remove(bullet)



def draw_winner(text):
    draw_text = WINNER_FONT.render(text, 1, WHITE)
    WIN.blit(draw_text, (WIDTH//2 - draw_text.get_width()//2, HEIGHT//2 - draw_text.get_height()//2))
    pygame.display.update()
    pygame.time.delay(5000)    

def main():

    menu_open = False
    stat_on = False


    red = pygame.Rect(WIDTH - 100, 250 - SPACESHIP_HEIGHT//2, SPACESHIP_WIDTH, SPACESHIP_HEIGHT)
    yellow = pygame.Rect(100, 250 - SPACESHIP_HEIGHT//2, SPACESHIP_WIDTH, SPACESHIP_HEIGHT)

    red_bullets = []
    yellow_bullets = []

    yellow_health = 10
    red_health = 10

    yellow_bullets_count = 0
    red_bullets_count = 0

    yellow_bullets_hit = 0
    red_bullets_hit = 0


    clock = pygame.time.Clock()
    run = True
    while run:
        clock.tick(FPS)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                pygame.quit()
                

            if event.type == pygame.KEYDOWN and menu_open == False:

                if event.key == pygame.K_c and len(yellow_bullets) < MAX_BULLETS:
                    bullet = pygame.Rect(yellow.x + yellow.width - 10, yellow.y + yellow.height//2 + 9, BULLET_WIDTH, BULLET_HEIGHT)
                    yellow_bullets.append(bullet)
                    yellow_bullets_count += 1
                    BULLET_FIRE_SOUND.play()

                if event.key == pygame.K_BACKSLASH and len(red_bullets) < MAX_BULLETS:
                    bullet = pygame.Rect(red.x, red.y + red.height//2 + 9, BULLET_WIDTH, BULLET_HEIGHT)
                    red_bullets.append(bullet)
                    red_bullets_count += 1
                    BULLET_FIRE_SOUND.play()

                
            if event.type == RED_HIT:
                red_health -= 1
                yellow_bullets_hit += 1
                BULLET_HIT_SOUND.play()
            if event.type == YELLOW_HIT:
                yellow_health -= 1
                red_bullets_hit += 1
                BULLET_HIT_SOUND.play()

            if  event.type == pygame.MOUSEBUTTONDOWN:
                mousepress = pygame.mouse.get_pressed()
                if mousepress[0]:
                    mousepos = pygame.mouse.get_pos()
                    if mousepos[0] <= WIDTH//2 + 20 and mousepos[0] >= WIDTH//2 - 20 and mousepos[1] >= 505 and mousepos[1] <= 545:
                        menu_open = not menu_open
                    if mousepos[0] <= WIDTH//2 + 20 and mousepos[0] >= WIDTH//2 and mousepos[1] >= HEIGHT//2 and mousepos[1] <= HEIGHT//2 + 20:
                        stat_on = not stat_on
                


        winner_text = ""
        if red_health <= 0:
            winner_text = "Yellow Wins!"
        if yellow_health <= 0:
            winner_text = "Red Wins!"



        if menu_open == False:
        
            keys_pressed = pygame.key.get_pressed()
            yellow_movement(keys_pressed, yellow)
            red_movement(keys_pressed, red)

            handle_bullets(yellow_bullets, red_bullets, yellow, red)


        draw_window(red, yellow, red_bullets, yellow_bullets, red_health, yellow_health, menu_open, red_bullets_count, yellow_bullets_count, red_bullets_hit, yellow_bullets_hit, stat_on)

        if winner_text != "":
            draw_winner(winner_text)
            break
    main()



if __name__ == "__main__":
    main()
