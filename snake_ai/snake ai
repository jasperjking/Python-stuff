import pygame
import math as maths
import random
import csv
import os

pygame.init()
pygame.font.init()

pygame.display.set_caption("Python (haha)")

WIDTH, HEIGHT = 650, 700
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
PLAY_BOX = pygame.Rect(25, 25, WIDTH - 50, HEIGHT - 100)

FPS = 100

GREEN = (100, 200, 100)
DARK_GREEN = (50, 150, 50)
BLACK = (0, 0, 0)
GREY = (50, 50, 50)
RED = (200, 0, 0)
BLUE = (100, 100, 200)
WHITE = (255, 255, 255)
WHITE_ALPHA = pygame.Color(255, 255, 255, a=50)

SCORE_FONT = pygame.font.SysFont('impact', 30)
HIGHSCORE = pygame.font.SysFont('impact', 18)
RESET_FONT = pygame.font.SysFont('impact', 20)
GAME_OVER_FONT = pygame.font.SysFont('impact', 75)


def draw_window(snake_head, snake_body, fruit, game_running, paused, highscore, score, renderd):
    if game_running and not paused:
        WIN.fill(BLACK)
        pygame.draw.rect(WIN, GREY, PLAY_BOX)

        score_text = SCORE_FONT.render("Score: " + str(score), 1, WHITE)
        WIN.blit(score_text, (30, HEIGHT - 40 - score_text.get_height()//2))
        highscore_text = HIGHSCORE.render("Highscore: " + str(highscore), 1, WHITE)
        WIN.blit(highscore_text, (30 + score_text.get_width() + 10, 656))

        pygame.draw.rect(WIN, RED, fruit)

        
        for i in range(0, len(snake_body)):
            if i % 2 == 0:
                pygame.draw.rect(WIN, DARK_GREEN, snake_body[i])
            else:
                pygame.draw.rect(WIN, GREEN, snake_body[i])
        pygame.draw.rect(WIN, BLUE, snake_head)

        reset__button_text = RESET_FONT.render("RESET", 1, WHITE)
        pygame.draw.rect(WIN, GREY, pygame.Rect(543, 635, 67, 45))
        pygame.draw.rect(WIN, BLACK, pygame.Rect(545, 637, 63, 41))
        WIN.blit(reset__button_text, (553, 645))



        pause_button_text = RESET_FONT.render("PAUSE", 1, WHITE)
        pygame.draw.rect(WIN, GREY, pygame.Rect(456, 635, 67, 45))
        pygame.draw.rect(WIN, BLACK, pygame.Rect(458, 637, 63, 41))
        WIN.blit(pause_button_text, (465, 645))

        #s = pygame.Surface((renderd * 20 * 2 + 20, renderd * 20 * 2 + 20), pygame.SRCALPHA)
        #s.fill((255, 255, 255, 100))
        #WIN.blit(s, (snake_head.x - renderd * 20, snake_head.y - renderd * 20))
        #pygame.draw.rect(WIN, pygame.Color(255, 255, 255, ), pygame.Rect(snake_head.x - renderd * 20, snake_head.y - renderd * 20, renderd*20*2, renderd*20*2))

    elif paused:
        paused_text = GAME_OVER_FONT.render("PAUSED", 1, WHITE)
        WIN.blit(paused_text, (WIDTH//2 - paused_text.get_width()//2, HEIGHT//2 - paused_text.get_height()//2))

    elif not game_running:
        game_over_text = GAME_OVER_FONT.render("GAME OVER", 1, WHITE)
        WIN.blit(game_over_text, (WIDTH//2 - game_over_text.get_width()//2, HEIGHT//2 - game_over_text.get_height()//2))


    pygame.display.update()


def snake_game():
    
    snake_head_vel = (0, -1)
    
    fruit = pygame.Rect(305, 205, 20, 20)
    snake_head = pygame.Rect(305, 305, 20, 20)
    snake_body = [snake_head]
    game_running = True
    paused = False
    score = 0
    renderd = 5

    with open(os.path.expanduser("~/Documents/Python stuff/snake_ai/highscore.txt")) as file:
        highscore = file.read()
        file.close()
        highscore = int(highscore)

    run = True
    clock = pygame.time.Clock()
    while run:
        clock.tick(FPS)


        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                if highscore > 2:
                    with open(os.path.expanduser("~/Documents/Python stuff/snake_ai/highscore.txt"), 'w') as file:
                        file.write(str(highscore))
                        file.close()
                        

                pygame.quit()
                run = False
            
            if event.type == pygame.MOUSEBUTTONDOWN:
                mousepress = pygame.mouse.get_pressed()
                if mousepress[0]:
                    mousepos = pygame.mouse.get_pos()
                    if mousepos[0] <= 543 + 67 and mousepos[0] >= 543 and mousepos[1] >= 635 and mousepos[1] <= 635 + 45:
                        snake_head_vel = (0, -1)
    
                        fruit = pygame.Rect(305, 205, 20, 20)
                        snake_head = pygame.Rect(305, 305, 20, 20)
                        snake_body = [snake_head]
                        game_running = True
                        score = 0
                        
                    elif mousepos[0] <= 456 + 67 and mousepos[0] >= 456 and mousepos[1] >= 635 and mousepos[1] <= 635 + 45:
                        paused = not paused

        if not paused:

            #create ai to find fruit
            #find distance to fruit

            #distance = maths.sqrt( (fruit.x - snake_head.x)**2 + (fruit.y - snake_head.y)**2 )
            distance = []
            s = '  '

            #recursivley find distance
            #find optimal distance after distance, move after move
            #or just plan out the whole sequence of moves

            if snake_head_vel[1] == 1: 
                distance.append(9999)
            elif pygame.Rect(snake_head.x, snake_head.y - 20, 20, 20) in snake_body:
                distance.append(9999)
            else:  
                distance.append(maths.sqrt( (fruit.x - snake_head.x)**2 + (fruit.y - (snake_head.y - 20))**2 )) #UP
                s += "UP: " + str(maths.sqrt( (fruit.x - snake_head.x)**2 + (fruit.y - (snake_head.y - 20))**2 )) + ", "

            if snake_head_vel[0] == -1: 
                distance.append(9999)
            elif pygame.Rect(snake_head.x + 20, snake_head.y, 20, 20) in snake_body:
                distance.append(9999)
            else:
                distance.append(maths.sqrt( (fruit.x - (snake_head.x + 20))**2 + (fruit.y - snake_head.y)**2 ))#RIGHT
                s += "RIGHT: " + str(maths.sqrt( (fruit.x - (snake_head.x + 20))**2 + (fruit.y - snake_head.y)**2 )) + ", "


            if snake_head_vel[1] == -1: 
                distance.append(9999)
            elif pygame.Rect(snake_head.x, snake_head.y + 20, 20, 20) in snake_body:
                distance.append(9999)
            else:
                distance.append(maths.sqrt( (fruit.x - snake_head.x)**2 + (fruit.y - (snake_head.y + 20))**2 )) #DOWN
                s += "DOWN: " + str(maths.sqrt( (fruit.x - snake_head.x)**2 + (fruit.y - (snake_head.y + 20))**2 )) + ", "


            if snake_head_vel[0] == 1: 
                distance.append(9999)
            elif pygame.Rect(snake_head.x - 20, snake_head.y, 20, 20) in snake_body:
                distance.append(9999)
            else:
                distance.append(maths.sqrt( (fruit.x - (snake_head.x - 20))**2 + (fruit.y - snake_head.y)**2 )) #LEFT
                s += "LEFT: " + str(maths.sqrt( (fruit.x - (snake_head.x - 20))**2 + (fruit.y - snake_head.y)**2 )) + ", "



           # print(s)

            min_value = min(distance)

            min_index = distance.index(min_value)

                #test each move to find one that moves closest
            #else move diagonally(ish) untill bounce of wall

            #UP     snake_head_vel = (0, -1)
            #DOWN   snake_head_vel = (0, 1)
            #LEFT   snake_head_vel = (-1, 0)
            #RIGHT  snake_head_vel = (1, 0)
 
            if min_index == 0: #UP
                snake_head_vel = (0, -1)
            elif min_index == 2: #DOWN
                snake_head_vel = (0, 1)
            elif min_index == 3 : #LEFT
                snake_head_vel = (-1, 0)
            elif min_index == 1: #RIGHT
                snake_head_vel = (1, 0)




            keys_pressed = pygame.key.get_pressed()


                #fruit.x = random.randint(0, 29) * 20 + 25
                #fruit.y = random.randint(0, 29) * 20 + 25


            #changes orinetation of snake
            if keys_pressed[pygame.K_w] and snake_head_vel[1] != 1 or keys_pressed[pygame.K_UP] and snake_head_vel[1] != 1: #UP
                snake_head_vel = (0, -1)
            elif keys_pressed[pygame.K_s] and snake_head_vel[1] != -1 or keys_pressed[pygame.K_DOWN] and snake_head_vel[1] != -1: #DOWN
                snake_head_vel = (0, 1)
            elif keys_pressed[pygame.K_a] and snake_head_vel[0] != 1 or keys_pressed[pygame.K_LEFT] and snake_head_vel[0] != 1: #LEFT
                snake_head_vel = (-1, 0)
            elif keys_pressed[pygame.K_d] and snake_head_vel[0] != -1 or keys_pressed[pygame.K_RIGHT] and snake_head_vel[0] != -1: #RIGHT
                snake_head_vel = (1, 0)
            elif keys_pressed[pygame.K_p]:
                snake_body.append(pygame.Rect(snake_head))              

            #moves snake head
            snake_head.x += 20 * snake_head_vel[0]
            snake_head.y += 20 * snake_head_vel[1]

            #detect if collected fruit, replaces fruit and increases body length
            if snake_head.colliderect(fruit):
                score += 1
                if score > highscore:
                    highscore = score

                fruit_placed = False
                while not fruit_placed:
                    fruit.x = random.randint(0, 29) * 20 + 25
                    fruit.y = random.randint(0, 29) * 20 + 25
                    is_collision = False
                    for body_segment in snake_body:
                        if body_segment.colliderect(fruit):
                            is_collision = True
                    if not is_collision:
                        fruit_placed = True

                
                snake_body.append(pygame.Rect(snake_head))        

           #update snake body
            snake_body.pop(0)
            snake_body.append(pygame.Rect(snake_head))

        
            #detect collision with wall
            if snake_head.x < 25 or snake_head.x >= WIDTH - 25 or snake_head.y < 25 or snake_head.y >= HEIGHT - 75:
                game_running = False

            #detect collision with snake
            for body in snake_body:
                if snake_head.colliderect(body) and snake_body.index(body) != len(snake_body) - 1 and snake_body.index(body) != len(snake_body) - 2:
                    game_running = False

        
        if not game_running:
            return score

            

        draw_window(snake_head, snake_body, fruit, game_running, paused, highscore, score, renderd)


def main():
    results = []
    for i in range(0, 50):
        results.append(snake_game())
        print(i)

    print("Min: " + str(min(results)))
    print("Max: " + str(max(results)))
    print("Avg: " + str(sum(results)/len(results)))





if __name__ == "__main__":
    main()