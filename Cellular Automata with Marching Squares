import pygame
import numpy

pygame.font.init()
pygame.init()

WIDTH, HEIGHT = 1338, 750
WIN = pygame.display.set_mode((WIDTH, HEIGHT))



def draw_window(grid, marching):

    WIN.fill((50, 50, 50))
    pygame.draw.rect(WIN, (100, 100, 100), (21, 21, 1284, 696))

    if not marching:
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    col = (200, 200, 200)
                else:
                    col = (100, 100, 100)

                pygame.draw.rect(WIN, col, pygame.Rect(j*7 + 21, i*7 + 21, 1, 1))
    else:
        for i in range(len(grid) - 1):
            for j in range(len(grid[0]) - 1):
                case = findcase(grid[i][j], grid[i + 1][j], grid[i + 1][j + 1], grid[i][j + 1])
                pointi = j*7 + 21
                pointj = i*7 + 21
                if case == 0: #DONE
                    pygame.draw.polygon(WIN, (100, 100, 100), ((pointi, pointj), (pointi + 6, pointj), (pointi + 6, pointj + 6), (pointi, pointj + 6)))
                elif case == 1: #DONE
                    pygame.draw.polygon(WIN, (200, 200, 200), ((pointi + 6, pointj), (pointi + 3, pointj), (pointi + 6, pointj + 3)))
                elif case == 2: #DONE
                    pygame.draw.polygon(WIN, (200, 200, 200), ((pointi + 6, pointj + 6), (pointi + 6, pointj + 3), (pointi + 3, pointj + 6)))
                elif case == 3: #DONE
                    pygame.draw.polygon(WIN, (200, 200, 200), ((pointi + 3, pointj), (pointi + 6, pointj), (pointi + 6, pointj + 6), (pointi + 3, pointj + 6)))
                elif case == 4: #DONE
                    pygame.draw.polygon(WIN, (200, 200, 200), ((pointi, pointj + 3), (pointi, pointj + 6), (pointi + 3, pointj + 6)))
                elif case == 5:
                    pygame.draw.polygon(WIN, (200, 200, 200), ((pointi + 3, pointj), (pointi + 6, pointj), (pointi + 6, pointj + 3), (pointi + 3, pointj + 6), (pointi, pointj + 6), (pointi, pointj + 3)  ))
                elif case == 6: #DONE
                    pygame.draw.polygon(WIN, (200, 200, 200), ((pointi + 6, pointj + 6), (pointi, pointj + 6), (pointi, pointj + 3), (pointi + 6, pointj + 3)))
                elif case == 7: #DONE
                    pygame.draw.polygon(WIN, (200, 200, 200), ((pointi + 6, pointj + 6), (pointi, pointj + 6), (pointi, pointj + 3), (pointi + 3, pointj), (pointi + 6, pointj)  ))
                elif case == 8: #DONE
                    pygame.draw.polygon(WIN, (200, 200, 200), ((pointi, pointj), (pointi + 3, pointj), (pointi, pointj + 3)))
                elif case == 9: #DONE
                    pygame.draw.polygon(WIN, (200, 200, 200), ((pointi, pointj), (pointi + 6, pointj), (pointi + 6, pointj + 3), (pointi, pointj + 3)))
                elif case == 10:
                    pygame.draw.polygon(WIN, (200, 200, 200), ((pointi, pointj), (pointi + 3, pointj), (pointi + 6, pointj + 3), (pointi + 6, pointj + 6), (pointi + 3, pointj + 6), (pointi, pointj + 3)))
                elif case == 11: #DONE
                    pygame.draw.polygon(WIN, (200, 200, 200), ((pointi, pointj), (pointi + 6, pointj), (pointi + 6, pointj + 6), (pointi + 3, pointj + 6), (pointi, pointj + 3)))
                elif case == 12: #DONE
                    pygame.draw.polygon(WIN, (200, 200, 200), ((pointi, pointj), (pointi + 3, pointj), (pointi + 3, pointj + 6), (pointi, pointj + 6)))
                elif case == 13: #DONE
                    pygame.draw.polygon(WIN, (200, 200, 200), ((pointi, pointj), (pointi + 6, pointj), (pointi + 6, pointj + 3), (pointi + 3, pointj + 6), (pointi, pointj + 6)))
                elif case == 14: #DONE
                    pygame.draw.polygon(WIN, (200, 200, 200), ((pointi, pointj), (pointi + 3, pointj), (pointi + 6, pointj + 3), (pointi + 6, pointj + 6), (pointi, pointj + 6)))
                elif case == 15: #DONE
                    pygame.draw.polygon(WIN, (200, 200, 200), ((pointi, pointj), (pointi + 6, pointj), (pointi + 6, pointj + 6), (pointi, pointj + 6)))

    pygame.display.update()


def findcase(a, b, c, d):
    case = 0
    if a == 1:
        case += 8
    if b == 1:
        case += 4
    if c == 1:
        case += 2
    if d == 1:
        case += 1

    return case
        

def findn(grid, x, y):
    neighbour = 0
    for i in range(5):
        for j in range(5):
            if x <= 1 or x >= len(grid) - 2 or y <= 1 or y >= len(grid[0]) - 2:
                neighbour += 1
            else:
                if grid[x - 2 + i][y - 2 + j] == 0: 
                    neighbour += 1
            
    return neighbour

def populatemap(grid):
    for i in range(len(grid)):
        for j in range(len(grid[0])):

            if i == 0 or j == 0 or i == len(grid) - 1 or j == len(grid[0]) - 1:
                grid[i][j] = 0 
            else:
                if numpy.random.random() < 0.5:
                    grid[i][j] = 1

    return grid

def smooth(grid):
    temp = [x[:] for x in grid]
    for i in range(len(grid[0])):
        for j in range(len(grid)):
            neighbours = findn(temp, j, i)
            
            if neighbours > 12:
                grid[j][i] = 0
            else: 
                grid[j][i] = 1
        
    return grid
        
def generatemap():
    grid = [[0] * 184 for x in range(100)]
    return grid

def main():

    grid = generatemap()
    marching = False

    run = True

    while run:

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                pygame.quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_a:
                    grid = generatemap()

                if event.key == pygame.K_s:
                    grid = populatemap(grid)

                if event.key == pygame.K_d:
                    for i in range(10):
                        grid = smooth(grid)

                if event.key == pygame.K_f:
                    marching = not marching
                        

                if event.key == pygame.K_SPACE:

                    grid = generatemap()
                    grid = populatemap(grid)

                    for i in range(15):
                        grid = smooth(grid)

                    marching = True
                        
              
        #make obstacle
        #detect obstacle collision
        #end game or detract score

        draw_window(grid, marching)

            
        


if __name__ == "__main__":
    main()