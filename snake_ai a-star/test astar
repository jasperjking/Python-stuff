import pygame
import math as maths

pygame.init()

WIDTH, HEIGHT = 750, 750
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
BUFFER = 25
PLAYBOX = pygame.Rect(BUFFER, BUFFER, WIDTH - 2 * BUFFER, HEIGHT - 2 * BUFFER)

FPS = 8

GREY = (100, 100, 100)
BLACK = (0, 0, 0)





def draw():
    WIN.fill(BLACK)
    pygame.draw.rect(WIN, GREY, PLAYBOX)

    pygame.display.update()

def reconstruct_path(cameFrom, current):
    total_path = [current]
    while current in cameFrom.Keys:
        current = cameFrom[current]
        total_path.insert(current)
    return total_path

def h(target, goal):
    deltay = (target[0] - goal[0])**2
    deltax = (target[1] - goal[1])**2
    distance = maths.sqrt(deltay + deltax)
    return distance
    

def d(target, neighbour):
    deltay = (target[0] - neighbour[0])**2
    deltax = (target[1] - neighbour[1])**2
    distance = maths.sqrt(deltay + deltax)
    return distance
    

#A* finds a path from start to goal.
# h is the heuristic function. h(n) estimates the cost to reach goal from node n.
def A_Star(start, goal):
    # The set of discovered nodes that may need to be (re-)expanded.
    # Initially, only the start node is known.
    # This is usually implemented as a min-heap or priority queue rather than a hash-set.
    openSet = [start]

    # For node n, cameFrom[n] is the node immediately preceding it on the cheapest path from start
    # to n currently known.
    cameFrom = [] #an empty map

    # For node n, gScore[n] is the cost of the cheapest path from start to n currently known.
    """gScore = map with default value of Infinity"""

    gScore = [[2147483647] * 10 for i in range(10)]
    gScore[start] = 0

    # For node n, fScore[n] = gScore[n] + h(n). fScore[n] represents our current best guess as to
    # how short a path from start to finish can be if it goes through n.
    """fScore = map with default value of Infinity"""
    fScore = [[2147483647] * 10 for i in range(10)]
    fScore[start] = h(start, goal)

    while len(openSet) > 0:
        # This operation can occur in O(Log(N)) time if openSet is a min-heap or a priority queue
        #current = the node in openSet having the lowest fScore[] value
        current = 0
        for node in openSet:
            if fScore[node] < current:
                current = node
        
        if current == goal:
            return reconstruct_path(cameFrom, current)

        openSet.Remove(current)

        neighbor = []


        if i > 0:
            neighbor.append((i, j))

        for i in range(4):


            




            # d(current,neighbor) is the weight of the edge from current to neighbor
            # tentative_gScore is the distance from start to the neighbor through current
            tentative_gScore = gScore[current] + d(current, neighbor)
            if tentative_gScore < gScore[neighbor]:
                # This path to neighbor is better than any previous one. Record it!
                cameFrom[neighbor] = current
                gScore[neighbor] = tentative_gScore
                fScore[neighbor] = tentative_gScore + h(neighbor)
                if neighbor not in openSet:
                    openSet.add(neighbor)

    # Open set is empty but goal was never reached
    return "failure"



def main():
    run = True
    clock = pygame.time.Clock()

    grid = [[0] * 10 for i in range(10)]

    neighbours = [[0] * 10 for i in range(10)]



    while run:
        clock.tick(FPS)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                run = False

    
        draw()



def astar_attempt_2():
    




if __name__ == "__main__":
    main()